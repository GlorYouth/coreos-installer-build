# 工作流名称
name: Daily coreos-installer Official Release Build and Publish (MUSL Static Linking)

# 工作流触发条件
on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间 00:00 (午夜) 运行
  push:
    branches:
      - main # 每次推送到 main 分支时自动运行
  workflow_dispatch:
    # 允许手动触发此工作流
    inputs:
      force_release:
        description: '强制发布新版本，即使版本号没有变化' # 完全使用中文描述
        required: false
        default: false
        type: boolean

jobs:
  # 步骤 1: 获取最新 Release 信息并决定是否需要发布
  get-latest-release-info:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_official_release.outputs.official_release_tag }}     # 输出官方 coreos-installer 的最新 Release 标签
      release_url: ${{ steps.get_official_release.outputs.official_zipball_url }}    # 输出官方 coreos-installer 最新 Release 的源码下载 URL
      release_version_prefix: ${{ steps.get_official_release.outputs.official_version_prefix }} # 输出从官方标签提取的版本前缀
      date_tag: ${{ steps.get_date.outputs.date_tag }}                     # 输出当前日期标签 (例如 20231026)
      date_name: ${{ steps.get_date.outputs.date_name }}                   # 输出当前日期名称 (例如 2023-10-26)
      needs_release: ${{ steps.determine_release_need.outputs.needs_release }}   # 输出是否需要发布新版本的标志 (true/false)
    permissions:
      contents: read # 检出代码和进行 API 调用（针对本仓库）通常需要读取权限

    steps:
      - name: Checkout your repository # 检出当前仓库代码
        uses: actions/checkout@v4

      - name: Get latest coreos-installer official release info # 获取 coreos-installer 官方最新 Release 信息
        id: get_official_release
        run: |
          # 安装 jq
          sudo apt-get update && sudo apt-get install -y jq
          OFFICIAL_RELEASE_INFO=$(curl -s -L "https://api.github.com/repos/coreos/coreos-installer/releases/latest")
          if [ -z "$OFFICIAL_RELEASE_INFO" ] || [ "$(echo "$OFFICIAL_RELEASE_INFO" | jq -r .message)" = "Not Found" ]; then
            echo "错误：未能从 coreos/coreos-installer 获取最新的 Release 信息。"
            exit 1
          fi
          OFFICIAL_TAG_NAME=$(echo "$OFFICIAL_RELEASE_INFO" | jq -r .tag_name)
          OFFICIAL_ZIPBALL_URL=$(echo "$OFFICIAL_RELEASE_INFO" | jq -r .zipball_url)
          OFFICIAL_VERSION_PREFIX=$(echo "$OFFICIAL_TAG_NAME" | sed 's/^v//')

          if [ -z "$OFFICIAL_TAG_NAME" ] || [ "$OFFICIAL_TAG_NAME" = "null" ]; then echo "错误：无法从官方 Release 信息中提取 tag_name。" >&2; exit 1; fi
          if [ -z "$OFFICIAL_ZIPBALL_URL" ] || [ "$OFFICIAL_ZIPBALL_URL" = "null" ]; then echo "错误：无法从官方 Release 信息中提取 zipball_url。" >&2; exit 1; fi
          if [ -z "$OFFICIAL_VERSION_PREFIX" ] || [ "$OFFICIAL_VERSION_PREFIX" = "null" ]; then echo "错误：无法从官方 tag_name ($OFFICIAL_TAG_NAME) 中确定 version_prefix。" >&2; exit 1; fi

          echo "官方 coreos-installer 最新 Release 标签: $OFFICIAL_TAG_NAME"
          echo "官方 coreos-installer 最新 zipball URL: $OFFICIAL_ZIPBALL_URL"
          echo "官方 coreos-installer 版本前缀: $OFFICIAL_VERSION_PREFIX"

          echo "official_release_tag=$OFFICIAL_TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "official_zipball_url=$OFFICIAL_ZIPBALL_URL" >> "$GITHUB_OUTPUT"
          echo "official_version_prefix=$OFFICIAL_VERSION_PREFIX" >> "$GITHUB_OUTPUT"

      - name: Get Current Date # 获取当前日期
        id: get_date
        run: |
          CURRENT_DATE_TAG=$(date +%Y%m%d)
          CURRENT_DATE_NAME=$(date +%Y-%m-%d)
          echo "date_tag=$CURRENT_DATE_TAG" >> "$GITHUB_OUTPUT"
          echo "date_name=$CURRENT_DATE_NAME" >> "$GITHUB_OUTPUT"
          echo "当前日期标签: $CURRENT_DATE_TAG"
          echo "当前日期名称: $CURRENT_DATE_NAME"

      - name: Get latest own repository release info # 获取本仓库的最新 Release 信息
        id: get_own_latest_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GITHUB_TOKEN 进行认证
        run: |
          OWN_RELEASE_INFO=$(curl -s -L -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          OWN_LATEST_RELEASE_TAG="" # 默认为空字符串

          # 检查API调用是否成功并且返回了有效的JSON
          if echo "$OWN_RELEASE_INFO" | jq -e .tag_name > /dev/null 2>&1; then
            OWN_LATEST_RELEASE_TAG=$(echo "$OWN_RELEASE_INFO" | jq -r .tag_name)
            echo "本仓库最新 Release 标签: $OWN_LATEST_RELEASE_TAG"
          else
            # 如果 jq 失败 (例如因为 "Not Found" 消息不是有效 JSON 或 .tag_name 不存在)
            echo "本仓库中未找到 Release，或无法解析最新的 Release 信息。"
            # OWN_LATEST_RELEASE_TAG 保持为空
          fi
          echo "own_latest_release_tag=$OWN_LATEST_RELEASE_TAG" >> "$GITHUB_OUTPUT"

      - name: Determine if Release is Needed # 根据版本比较决定是否需要发布
        id: determine_release_need
        run: |
          CURRENT_OFFICIAL_TAG="${{ steps.get_official_release.outputs.official_release_tag }}"
          OWN_LATEST_TAG_FULL="${{ steps.get_own_latest_release.outputs.own_latest_release_tag }}"
          
          PREVIOUS_OFFICIAL_EQUIVALENT_TAG=""
          if [ -n "$OWN_LATEST_TAG_FULL" ] && [ "$OWN_LATEST_TAG_FULL" != "null" ]; then
            # 从本仓库的 Release 标签 (例如 v0.24.0-20250521) 提取核心版本部分 (例如 v0.24.0)
            PREVIOUS_OFFICIAL_EQUIVALENT_TAG=$(echo "$OWN_LATEST_TAG_FULL" | cut -d'-' -f1)
            echo "本仓库最新 Release 标签中的核心版本部分: $PREVIOUS_OFFICIAL_EQUIVALENT_TAG"
          else
            echo "本仓库中未找到之前的有效 Release 标签。"
          fi

          NEEDS_RELEASE="false"
          EVENT_NAME="${{ github.event_name }}"
          FORCE_RELEASE_INPUT="${{ github.event.inputs.force_release }}"

          echo "当前事件名称: $EVENT_NAME"
          echo "强制发布输入: $FORCE_RELEASE_INPUT"
          echo "CoreOS/coreos-installer 最新官方 Release 标签: $CURRENT_OFFICIAL_TAG"

          if [ "$EVENT_NAME" = "push" ]; then
              NEEDS_RELEASE="true"
              echo "工作流由 push 事件触发。需要发布新版本 (跳过版本号比较)。"
          elif [ "$FORCE_RELEASE_INPUT" = "true" ]; then
              NEEDS_RELEASE="true"
              echo "强制发布输入为 true。需要发布新版本 (跳过版本号比较)。"
          elif [ -z "$PREVIOUS_OFFICIAL_EQUIVALENT_TAG" ]; then
              NEEDS_RELEASE="true"
              echo "本仓库中未找到之前的有效 Release 或无法解析其核心版本。需要发布新版本。"
          elif [ "$CURRENT_OFFICIAL_TAG" != "$PREVIOUS_OFFICIAL_EQUIVALENT_TAG" ]; then
              NEEDS_RELEASE="true"
              echo "官方 coreos-installer 版本已更新 (官方最新: $CURRENT_OFFICIAL_TAG, 本仓库上次构建基于的官方版本: $PREVIOUS_OFFICIAL_EQUIVALENT_TAG)。需要发布新版本。"
          else
              echo "官方 coreos-installer 版本未发生变化 (均为 $CURRENT_OFFICIAL_TAG，与本仓库上次构建基于的官方版本一致)。不需要发布新版本。"
          fi
          echo "needs_release=$NEEDS_RELEASE" >> "$GITHUB_OUTPUT"

  # 步骤 2: 多架构构建 Job (MUSL)
  build-multi-arch-musl:
    name: Build for ${{ matrix.target.name }} (MUSL)
    needs: get-latest-release-info # 依赖于获取 Release 信息 Job
    # 仅当 "get-latest-release-info" 步骤指示需要发布时才执行此 Job
    if: ${{ success() && needs.get-latest-release-info.outputs.needs_release == 'true' }}
    runs-on: ubuntu-latest
    env: # 将所需变量提升到 Job 级别环境变量
      RELEASE_ZIP_URL: ${{ needs.get-latest-release-info.outputs.release_url }}
      COREOS_INSTALLER_OFFICIAL_TAG: ${{ needs.get-latest-release-info.outputs.release_tag }} # 这是官方的标签
      RELEASE_VERSION_PREFIX: ${{ needs.get-latest-release-info.outputs.release_version_prefix }}
      ARM64_UBUNTU_PORTS_SOURCES: | # 为 arm64 定义 APT 源文件内容 (来自 ports.ubuntu.com)
        Types: deb
        URIs: http://ports.ubuntu.com/ubuntu-ports
        Suites: noble noble-updates noble-backports noble-security
        Components: main restricted universe multiverse
        Architectures: arm64
        Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
      AMD64_ONLY_UBUNTU_SOURCES: | # 定义一个仅用于 amd64 的主要 Ubuntu 源文件内容
        Types: deb
        URIs: http://azure.archive.ubuntu.com/ubuntu/
        Suites: noble noble-updates noble-backports
        Components: main restricted universe multiverse
        Architectures: amd64
        Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg

        Types: deb
        URIs: http://security.ubuntu.com/ubuntu/
        Suites: noble-security
        Components: main restricted universe multiverse
        Architectures: amd64
        Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
    strategy:
      matrix:
        target:
          - name: x86_64-linux-musl  # 更改目标名称以反映 MUSL
            rust_target: x86_64-unknown-linux-musl # 更改 Rust 目标
            arch_suffix: x86_64-musl # 更改产物后缀
            c_compiler: gcc # 主机 GCC 应该能处理 x86_64 MUSL
          - name: arm64-linux-musl   # 更改目标名称以反映 MUSL
            rust_target: aarch64-unknown-linux-musl # 更改 Rust 目标
            arch_suffix: aarch64-musl # 更改产物后缀
            c_compiler: aarch64-linux-gnu-gcc # 交叉编译器
    permissions:
      contents: read # 只需读取源码
      actions: write # 授予写入权限以上传 artifacts
    steps:
      - name: Checkout your repository # 检出当前仓库代码
        uses: actions/checkout@v4

      - name: Download coreos-installer official release source # 下载 coreos-installer 官方 Release 源码
        id: download_source # 为此步骤添加ID
        run: |
          # 从环境变量中的URL下载源码压缩包
          echo "正在从 ${{ env.RELEASE_ZIP_URL }} 下载源码..."
          curl -L "${{ env.RELEASE_ZIP_URL }}" -o coreos-installer-source.zip
          
          # 检查下载是否成功（简单检查文件是否存在）
          if [ ! -f coreos-installer-source.zip ]; then
            echo "错误：未能下载 coreos-installer-source.zip。使用的 URL: ${{ env.RELEASE_ZIP_URL }}"
            exit 1
          fi
          echo "源码下载完成。"

          unzip -q coreos-installer-source.zip -d coreos-installer-source # -q 安静模式解压
          
          # 找到实际的源码目录
          COREOS_INSTALLER_DIR=$(ls -d coreos-installer-source/*/)
          
          # 检查 COREOS_INSTALLER_DIR 是否找到
          if [ -z "$COREOS_INSTALLER_DIR" ]; then
            echo "错误：解压后未能找到 coreos-installer 源码目录。"
            echo "coreos-installer-source 目录内容:"
            ls -F coreos-installer-source/ || true # 列出内容，如果目录不存在则忽略错误
            exit 1
          fi

          echo "coreos-installer 源码目录: $COREOS_INSTALLER_DIR"
          echo "coreos_installer_dir=$COREOS_INSTALLER_DIR" >> "$GITHUB_OUTPUT" # 设置为步骤输出变量

      - name: Install build dependencies for ${{ matrix.target.name }} # 为 ${{ matrix.target.name }} 安装构建依赖
        run: |
          sudo apt-get update
          # 安装 musl-tools (提供 musl-gcc 包装器和 musl libc) 和 pkg-config
          # 对于 x86_64-musl, musl-tools 中的 musl-gcc 应该足够
          # 对于 aarch64-musl, 我们仍需 crossbuild-essential-arm64 提供底层的 aarch64-linux-gnu-gcc, musl-tools 会用它
          sudo apt-get install -y musl-tools pkg-config libzstd-dev # 主机 libzstd-dev 仍然需要 (用于 .pc 文件)
          
          if [ "${{ matrix.target.rust_target }}" = "aarch64-unknown-linux-musl" ]; then
            echo "为 aarch64-musl 配置 APT 以支持多架构依赖..."
            sudo dpkg --add-architecture arm64
            
            echo "覆盖 /etc/apt/sources.list.d/ubuntu.sources 使其仅用于 amd64..."
            echo "$AMD64_ONLY_UBUNTU_SOURCES" | sudo tee /etc/apt/sources.list.d/ubuntu.sources > /dev/null

            echo "创建 arm64 特定源文件指向 ports.ubuntu.com..."
            echo "$ARM64_UBUNTU_PORTS_SOURCES" | sudo tee /etc/apt/sources.list.d/arm64-ubuntu-ports.sources > /dev/null

            echo "清理 APT 缓存..."
            sudo apt-get clean
            
            echo "再次更新包列表 (应正确处理 amd64 和 arm64 源)..."
            sudo apt-get update -o Acquire::Retries=3 -o APT::Get::Always-Include-Phased-Updates=true
            
            echo "正在为 aarch64-musl 安装交叉编译工具, libssl-dev:arm64 和 libzstd-dev:arm64 (用于 .pc 文件)..."
            sudo apt-get install -y -o Acquire::Retries=3 crossbuild-essential-arm64 libssl-dev:arm64 libzstd-dev:arm64
            
            echo "验证 libssl-dev:arm64 是否已正确安装其 .pc 文件..."
            if [ ! -f /usr/lib/aarch64-linux-gnu/pkgconfig/openssl.pc ]; then
                echo "错误: /usr/lib/aarch64-linux-gnu/pkgconfig/openssl.pc 未找到。"
                exit 1
            fi
            echo "验证 libzstd-dev:arm64 是否已正确安装其 .pc 文件..."
            if [ ! -f /usr/lib/aarch64-linux-gnu/pkgconfig/libzstd.pc ]; then
                echo "错误: /usr/lib/aarch64-linux-gnu/pkgconfig/libzstd.pc 未找到。"
                exit 1
            fi
          else # x86_64-unknown-linux-musl
            echo "正在为主机 musl 构建安装 libssl-dev (libzstd-dev 已安装)..."
            sudo apt-get install -y libssl-dev
          fi

      - name: Setup Rust toolchain for ${{ matrix.target.name }} # 为 ${{ matrix.target.name }} 设置 Rust 工具链
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target.rust_target }} # 确保安装了 MUSL 目标

      - name: Build coreos-installer for ${{ matrix.target.name }} # 为 ${{ matrix.target.name }} 构建 coreos-installer
        env: # 通用优化环境变量，适用于所有目标
          CARGO_PROFILE_RELEASE_OPT_LEVEL: "z"
          CARGO_PROFILE_RELEASE_LTO: "fat"
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: "1"
          CARGO_PROFILE_RELEASE_PANIC: "abort"
          CARGO_PROFILE_RELEASE_STRIP: "symbols"
          # 为 MUSL 目标设置 C 编译器。musl-gcc 会处理链接 MUSL libc
          # 对于 openssl-sys 和 zstd-sys，它们通常有 vendored 特性或能静态链接
          OPENSSL_STATIC: "true" # 尝试强制 openssl-sys 静态链接
          ZSTD_STATIC: "true"    # 尝试强制 zstd-sys 静态链接 (如果支持)
        run: |
          echo "开始为 ${{ matrix.target.name }} (Rust target: ${{ matrix.target.rust_target }}) 构建 coreos-installer..."
          cd "${{ steps.download_source.outputs.coreos_installer_dir }}"
          
          echo "当前工作目录: $(pwd)"
          cargo --version
          echo "构建目标: ${{ matrix.target.rust_target }}"

          # 清理可能冲突的环境变量
          unset OPENSSL_DIR OPENSSL_LIB_DIR OPENSSL_INCLUDE_DIR
          unset PKG_CONFIG PKG_CONFIG_PATH PKG_CONFIG_LIBDIR PKG_CONFIG_SYSROOT_DIR

          # 为 MUSL 目标配置 C 编译器和 pkg-config
          if [[ "${{ matrix.target.rust_target }}" == *"-musl" ]]; then
            # 对于 MUSL 目标，Rust 通常会查找 <target_triple>-gcc (例如 x86_64-linux-musl-gcc)
            # musl-tools 应该提供了 musl-gcc，它是一个包装器
            # 我们需要确保 Rust 使用正确的链接器，通常是 musl-gcc
            # 对于交叉编译 aarch64-musl，底层的 C 编译器是 aarch64-linux-gnu-gcc，musl-gcc 会用它
            export CC="${{ matrix.target.c_compiler }}"
            if [ "${{ matrix.target.rust_target }}" = "aarch64-unknown-linux-musl" ]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER="${{ matrix.target.c_compiler }}"
              # 配置 pkg-config 以查找 aarch64 的 .pc 文件，即使我们是静态链接 MUSL，
              # openssl-sys/zstd-sys 的构建脚本仍可能使用它来找到头文件等。
              HOST_PKG_CONFIG=$(command -v pkg-config)
              if [ -z "$HOST_PKG_CONFIG" ]; then echo "错误: 主机 pkg-config 未找到。" >&2; exit 1; fi
              export PKG_CONFIG="$HOST_PKG_CONFIG"
              export PKG_CONFIG_ALLOW_CROSS_COMPILE=true
              export PKG_CONFIG_LIBDIR="/usr/lib/aarch64-linux-gnu/pkgconfig" # .pc 文件位置
              echo "  (aarch64-musl) CC: $CC"
              echo "  (aarch64-musl) LINKER: ${CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER}"
              echo "  (aarch64-musl) PKG_CONFIG: $PKG_CONFIG"
              echo "  (aarch64-musl) PKG_CONFIG_LIBDIR: $PKG_CONFIG_LIBDIR"
            else # x86_64-unknown-linux-musl
              export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER="musl-gcc"
              # 主机 pkg-config 应该能找到主机的 libssl-dev 和 libzstd-dev 的 .pc 文件
              HOST_PKG_CONFIG=$(command -v pkg-config)
              if [ -z "$HOST_PKG_CONFIG" ]; then echo "错误: 主机 pkg-config 未找到。" >&2; exit 1; fi
              export PKG_CONFIG="$HOST_PKG_CONFIG"
              echo "  (x86_64-musl) CC: $CC"
              echo "  (x86_64-musl) LINKER: ${CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER}"
              echo "  (x86_64-musl) PKG_CONFIG: $PKG_CONFIG"
            fi
          fi
          
          echo "执行 cargo build..."
          # 尝试添加 RUSTFLAGS 来鼓励静态链接依赖项，尽管这更多取决于 -sys crate 的行为
          # RUSTFLAGS="-C target-feature=+crt-static" cargo build --release --locked --target ${{ matrix.target.rust_target }}
          cargo build --release --locked --target ${{ matrix.target.rust_target }}
          echo "为 ${{ matrix.target.name }} 构建完成。"
          
          cp "target/${{ matrix.target.rust_target }}/release/coreos-installer" "${{ github.workspace }}/coreos-installer-${{ matrix.target.arch_suffix }}"
          echo "已将编译产物复制到 ${{ github.workspace }}/coreos-installer-${{ matrix.target.arch_suffix }}"

      - name: Calculate SHA256 for ${{ matrix.target.name }} # 为 ${{ matrix.target.name }} 计算 SHA256
        run: |
          # 计算 SHA256 并生成 .sha256 文件
          echo "正在为 ${{ github.workspace }}/coreos-installer-${{ matrix.target.arch_suffix }} 计算 SHA256..."
          sha256sum "${{ github.workspace }}/coreos-installer-${{ matrix.target.arch_suffix }}" > "${{ github.workspace }}/coreos-installer-${{ matrix.target.arch_suffix }}.sha256"
          cat "${{ github.workspace }}/coreos-installer-${{ matrix.target.arch_suffix }}.sha256"

      - name: Upload Artifacts for ${{ matrix.target.name }} # 为 ${{ matrix.target.name }} 上传 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coreos-installer-${{ matrix.target.arch_suffix }} # 例如: coreos-installer-x86_64-musl
          path: |
            ./coreos-installer-${{ matrix.target.arch_suffix }}
            ./coreos-installer-${{ matrix.target.arch_suffix }}.sha256

  # 步骤 3: 创建 Release Job (MUSL)
  create-release-musl:
    name: Create MUSL Release
    needs: [get-latest-release-info, build-multi-arch-musl] # 依赖于获取信息和所有 MUSL 构建 Job
    runs-on: ubuntu-latest
    permissions:
      contents: write # 授予写入权限以创建 Release
      actions: read   # 授予读取权限以下载 artifacts
    if: ${{ success() && needs.get-latest-release-info.outputs.needs_release == 'true' }}
    env: # 将所需变量提升到 Job 级别环境变量
      DATE_TAG: ${{ needs.get-latest-release-info.outputs.date_tag }}
      OFFICIAL_TAG: ${{ needs.get-latest-release-info.outputs.release_tag }}
      VERSION_PREFIX: ${{ needs.get-latest-release-info.outputs.release_version_prefix }}
      DATE_NAME: ${{ needs.get-latest-release-info.outputs.date_name }}
    steps:
      - name: Download all coreos-installer MUSL artifacts # 下载所有 coreos-installer MUSL 构建产物
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded_release_assets/ 
          # pattern: coreos-installer-*-musl # 如果有其他非 musl 的 artifact，可以使用模式

      - name: List downloaded artifacts # 列出下载的产物 (调试用)
        run: ls -R ./downloaded_release_assets/

      - name: Prepare release assets # 准备 Release 资产
        run: |
          mkdir -p release_assets # 创建用于存放最终 Release 资产的目录
          
          echo "准备 x86_64-musl 版本化资产..."
          cp "./downloaded_release_assets/coreos-installer-x86_64-musl/coreos-installer-x86_64-musl" \
             "release_assets/coreos-installer-${{ env.VERSION_PREFIX }}-x86_64-unknown-linux-musl"
          cp "./downloaded_release_assets/coreos-installer-x86_64-musl/coreos-installer-x86_64-musl.sha256" \
             "release_assets/coreos-installer-${{ env.VERSION_PREFIX }}-x86_64-unknown-linux-musl.sha256"

          echo "准备 aarch64-musl 版本化资产..."
          cp "./downloaded_release_assets/coreos-installer-aarch64-musl/coreos-installer-aarch64-musl" \
             "release_assets/coreos-installer-${{ env.VERSION_PREFIX }}-aarch64-unknown-linux-musl"
          cp "./downloaded_release_assets/coreos-installer-aarch64-musl/coreos-installer-aarch64-musl.sha256" \
             "release_assets/coreos-installer-${{ env.VERSION_PREFIX }}-aarch64-unknown-linux-musl.sha256"

          echo "准备 x86_64-musl 固定名称资产 (latest)..."
          cp "./downloaded_release_assets/coreos-installer-x86_64-musl/coreos-installer-x86_64-musl" \
             "release_assets/coreos-installer-x86_64-musl-latest"
          cp "./downloaded_release_assets/coreos-installer-x86_64-musl/coreos-installer-x86_64-musl.sha256" \
             "release_assets/coreos-installer-x86_64-musl-latest.sha256"

          echo "准备 aarch64-musl 固定名称资产 (latest)..."
          cp "./downloaded_release_assets/coreos-installer-aarch64-musl/coreos-installer-aarch64-musl" \
             "release_assets/coreos-installer-aarch64-musl-latest"
          cp "./downloaded_release_assets/coreos-installer-aarch64-musl/coreos-installer-aarch64-musl.sha256" \
             "release_assets/coreos-installer-aarch64-musl-latest.sha256"
          
          echo "正在生成总的 SHA256SUMS 文件 (MUSL)..."
          (cd release_assets && sha256sum \
            coreos-installer-${{ env.VERSION_PREFIX }}-x86_64-unknown-linux-musl \
            coreos-installer-${{ env.VERSION_PREFIX }}-aarch64-unknown-linux-musl \
            coreos-installer-x86_64-musl-latest \
            coreos-installer-aarch64-musl-latest \
          ) > release_assets/SHA256SUMS-musl # 为 musl 版本使用不同的 SHA256SUMS 文件名或合并

          echo "Release MUSL 资产准备完成。目录 'release_assets' 内容:"
          ls -l release_assets/

      - name: Create Release (MUSL) # 创建 GitHub Release (MUSL)
        uses: softprops/action-gh-release@v1 
        with:
          tag_name: ${{ env.OFFICIAL_TAG }}-${{ env.DATE_TAG }}-musl # 为 MUSL Release 添加 -musl 后缀
          name: coreos-installer 官方构建 ${{ env.OFFICIAL_TAG }} (MUSL 静态链接, ${{ env.DATE_NAME }})
          body: |
            ### `coreos-installer` 官方版本的自动化多架构构建 (MUSL 静态链接)

            这是基于 `coreos-installer` 官方 **${{ env.OFFICIAL_TAG }}** Release 的自动化多架构构建版本，使用 MUSL Libc 进行静态链接。

            **官方 Release 标签:** ${{ env.OFFICIAL_TAG }}
            **本次构建日期:** ${{ env.DATE_NAME }}
            **触发本次构建的提交 (本仓库):** ${{ github.sha }}

            **包含的资产 (MUSL):**
            *版本化资产:*
            - `coreos-installer-${{ env.VERSION_PREFIX }}-x86_64-unknown-linux-musl`
            - `coreos-installer-${{ env.VERSION_PREFIX }}-x86_64-unknown-linux-musl.sha256`
            - `coreos-installer-${{ env.VERSION_PREFIX }}-aarch64-unknown-linux-musl`
            - `coreos-installer-${{ env.VERSION_PREFIX }}-aarch64-unknown-linux-musl.sha256`

            *固定名称最新资产 (指向此 Release 中的对应架构 MUSL 文件):*
            - `coreos-installer-x86_64-musl-latest`
            - `coreos-installer-x86_64-musl-latest.sha256`
            - `coreos-installer-aarch64-musl-latest`
            - `coreos-installer-aarch64-musl-latest.sha256`
            
            - `SHA256SUMS-musl` (包含以上所有 MUSL 二进制文件的校验和)

            *注意: 此构建基于官方发布的源码。请在使用前验证校验和。*
          files: release_assets/* # 上传 'release_assets' 目录下的所有文件
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
