# 工作流名称
name: 每日构建和发布 coreos-installer

# 工作流触发条件
on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间 00:00 (午夜) 运行
  push:
    branches:
      - main # 每次推送到 main 分支时自动运行
  workflow_dispatch:
    # 允许手动触发此工作流
    inputs:
      force_release:
        description: '强制发布新版本，即使版本号没有变化'
        required: false
        default: false
        type: boolean

jobs:
  # 步骤 1: 获取最新 Release 信息并决定是否需要发布
  get-release-info:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_official_release.outputs.official_release_tag }}
      date_tag: ${{ steps.get_date.outputs.date_tag }}
      date_name: ${{ steps.get_date.outputs.date_name }}
      needs_release: ${{ steps.determine_release_need.outputs.needs_release }}
      image_repo: ${{ steps.prepare_names.outputs.image_repo_lowercase }}
    permissions:
      contents: read # 检出代码和调用API需要读取权限

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 获取 coreos-installer 官方最新 Release 信息
        id: get_official_release
        run: |
          RELEASE_INFO=$(curl -sL "https://api.github.com/repos/coreos/coreos-installer/releases/latest")
          TAG_NAME=$(echo "$RELEASE_INFO" | jq -r .tag_name)
          if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "null" ]; then
            echo "错误：未能从 coreos/coreos-installer 获取最新的 Release 标签。"
            exit 1
          fi
          echo "官方最新 Release 标签: $TAG_NAME"
          echo "official_release_tag=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: 获取当前日期
        id: get_date
        run: |
          echo "date_tag=$(date +%Y%m%d)" >> "$GITHUB_OUTPUT"
          echo "date_name=$(date +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: 获取本仓库的最新 Release 信息
        id: get_own_latest_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWN_RELEASE_INFO=$(curl -sL -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          OWN_TAG_NAME=$(echo "$OWN_RELEASE_INFO" | jq -r .tag_name)
          echo "本仓库最新 Release 标签: ${OWN_TAG_NAME:-'未找到'}"
          echo "own_latest_release_tag=$OWN_TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: 根据版本比较决定是否需要发布
        id: determine_release_need
        run: |
          CURRENT_OFFICIAL_TAG="${{ steps.get_official_release.outputs.official_release_tag }}"
          OWN_LATEST_TAG_FULL="${{ steps.get_own_latest_release.outputs.own_latest_release_tag }}"
          PREVIOUS_OFFICIAL_EQUIVALENT_TAG=$(echo "$OWN_LATEST_TAG_FULL" | cut -d'-' -f1)

          if [ "${{ github.event.inputs.force_release }}" = "true" ] || [ "${{ github.event_name }}" = "push" ] || [ "$CURRENT_OFFICIAL_TAG" != "$PREVIOUS_OFFICIAL_EQUIVALENT_TAG" ]; then
            echo "需要发布新版本。"
            echo "needs_release=true" >> "$GITHUB_OUTPUT"
          else
            echo "版本未变化，无需发布新版本。"
            echo "needs_release=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 准备仓库名称的小写版本
        id: prepare_names
        run: |
          echo "image_repo_lowercase=ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

  # 步骤 2: 并行构建各个架构的容器镜像 (原生构建)
  build-per-arch:
    needs: get-release-info
    if: needs.get-release-info.outputs.needs_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
          - arch: arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }} # 动态选择原生 Runner
    permissions:
      contents: read
      packages: write
    steps:
      - name: 检出仓库代码 (包含 Dockerfile)
        uses: actions/checkout@v4

      # 注意：因为是在原生 Runner 上构建，不再需要 setup-qemu-action
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 为 ${{ matrix.arch }} 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ needs.get-release-info.outputs.image_repo }}:${{ needs.get-release-info.outputs.release_tag }}-${{ needs.get-release-info.outputs.date_tag }}-${{ matrix.arch }}

  # 步骤 3: 将各架构镜像合并为多架构清单
  create-manifest:
    needs: [get-release-info, build-per-arch]
    if: needs.get-release-info.outputs.needs_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: 登录到 GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建并推送多架构清单
        run: |
          set -eux
          VERSION_TAG="${{ needs.get-release-info.outputs.image_repo }}:${{ needs.get-release-info.outputs.release_tag }}-${{ needs.get-release-info.outputs.date_tag }}"
          LATEST_TAG="${{ needs.get-release-info.outputs.image_repo }}:latest"
          
          echo "正在为 ${VERSION_TAG} 创建清单"
          docker manifest create "${VERSION_TAG}" \
            "${VERSION_TAG}-amd64" \
            "${VERSION_TAG}-arm64"
          docker manifest push "${VERSION_TAG}"

          echo "正在为 ${LATEST_TAG} 创建清单"
          docker manifest create "${LATEST_TAG}" \
            "${VERSION_TAG}-amd64" \
            "${VERSION_TAG}-arm64"
          docker manifest push "${LATEST_TAG}"

  # 步骤 4: 提取二进制文件并创建 GitHub Release
  create-release-with-assets:
    needs: [get-release-info, create-manifest]
    if: needs.get-release-info.outputs.needs_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # 创建 Release 需要写入权限
      packages: read   # 需要读取权限才能从 GHCR 拉取镜像

    steps:
      - name: 设置 QEMU (仅用于 docker cp)
        uses: docker/setup-qemu-action@v3

      - name: 登录到 GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建用于存放资产的目录
        run: mkdir ./release_assets

      - name: 从镜像中提取可执行文件
        run: |
          set -eux
          FULL_IMAGE_TAG="${{ needs.get-release-info.outputs.image_repo }}:${{ needs.get-release-info.outputs.release_tag }}-${{ needs.get-release-info.outputs.date_tag }}"
          
          echo "正在从镜像 ${FULL_IMAGE_TAG} (amd64) 中提取文件..."
          AMD64_CONTAINER_ID=$(docker create --platform linux/amd64 ${FULL_IMAGE_TAG})
          docker cp "${AMD64_CONTAINER_ID}:/usr/local/bin/coreos-installer" ./release_assets/coreos-installer-x86_64
          docker rm -v ${AMD64_CONTAINER_ID}

          echo "正在从镜像 ${FULL_IMAGE_TAG} (arm64) 中提取文件..."
          ARM64_CONTAINER_ID=$(docker create --platform linux/arm64 ${FULL_IMAGE_TAG})
          docker cp "${ARM64_CONTAINER_ID}:/usr/local/bin/coreos-installer" ./release_assets/coreos-installer-aarch64
          docker rm -v ${ARM64_CONTAINER_ID}

      - name: 列出准备好的资产 (调试用)
        run: ls -lR ./release_assets

      - name: 创建 GitHub Release 并上传资产
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-release-info.outputs.release_tag }}-${{ needs.get-release-info.outputs.date_tag }}
          name: 版本 ${{ needs.get-release-info.outputs.release_tag }} (构建于 ${{ needs.get-release-info.outputs.date_name }})
          body: |
            ### 新版本发布：容器镜像和二进制文件

            此版本发布了基于 `coreos-installer` 官方 **${{ needs.get-release-info.outputs.release_tag }}** 源码的全新多架构产物。

            #### 容器镜像
            您可以通过 Docker/Podman 拉取支持 `linux/amd64` 和 `linux/arm64` 的容器镜像。

            - **镜像仓库:** `${{ needs.get-release-info.outputs.image_repo }}`
            - **拉取命令 (版本特定):**
              ```sh
              docker pull ${{ needs.get-release-info.outputs.image_repo }}:${{ needs.get-release-info.outputs.release_tag }}-${{ needs.get-release-info.outputs.date_tag }}
              ```
            - **拉取命令 (最新):**
              ```sh
              docker pull ${{ needs.get-release-info.outputs.image_repo }}:latest
              ```

            #### 可执行文件
            您也可以在此 Release 页面下方的 **Assets** 中下载静态编译的 `x86_64` 和 `aarch64` 架构可执行文件。
          files: ./release_assets/*
