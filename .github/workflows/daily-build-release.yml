name: Daily coreos-installer Build and Conditional Release

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间 00:00 (午夜) 运行
  workflow_dispatch:
    # 允许手动触发此工作流

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 授予写入权限以创建 Release
      actions: write # 授予写入权限以上传/下载 artifacts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libzstd-dev

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build coreos-installer
        # 二进制文件在 /home/runner/.cargo/bin/coreos-installer
        run: cargo install coreos-installer && cp /home/runner/.cargo/bin/coreos-installer ./coreos-installer

      - name: Get Current Date and Calculate SHA256
        id: date_and_sha # 为此步骤定义一个ID
        run: |
          # 获取当前日期并设置为输出变量
          CURRENT_DATE_TAG=$(date +%Y%m%d)
          CURRENT_DATE_NAME=$(date +%Y-%m-%d)
          echo "date_tag=$CURRENT_DATE_TAG" >> "$GITHUB_OUTPUT" # 设置为输出变量
          echo "date_name=$CURRENT_DATE_NAME" >> "$GITHUB_OUTPUT" # 设置为输出变量

          # 计算当前 coreos-installer 的 SHA256
          CURRENT_SHA256=$(sha256sum coreos-installer | awk '{print $1}')
          echo "current_sha256=$CURRENT_SHA256" >> "$GITHUB_OUTPUT"
          echo "Current coreos-installer SHA256: $CURRENT_SHA256"

          # 无论是否 Release，都将当前的 SHA256 保存到文件中
          mkdir -p ./.github/ # 确保目录存在
          echo "$CURRENT_SHA256" > ./.github/coreos-installer_sha256.txt

      - name: Download previous SHA256 artifact
        uses: actions/download-artifact@v4
        with:
          name: previous-sha256
          path: ./downloaded_artifacts/ # 下载到临时目录，避免覆盖当前生成的 .github/coreos-installer_sha256.txt
        continue-on-error: true # 第一次运行或没有 artifact 时，允许失败

      - name: Check for previous SHA256
        id: check_previous_sha
        run: |
          # Artifact 会被解压到 ./downloaded_artifacts/previous-sha256/coreos-installer_sha256.txt
          DOWNLOADED_PREVIOUS_SHA_FILE="./downloaded_artifacts/previous-sha256/coreos-installer_sha256.txt"
          PREVIOUS_SHA256=""

          if [ -f "$DOWNLOADED_PREVIOUS_SHA_FILE" ]; then
            PREVIOUS_SHA256=$(cat "$DOWNLOADED_PREVIOUS_SHA_FILE")
            echo "Previous coreos-installer SHA256 (from artifact): $PREVIOUS_SHA256"
          else
            echo "No previous coreos-installer SHA256 artifact found."
          fi

          echo "previous_sha256=$PREVIOUS_SHA256" >> "$GITHUB_OUTPUT"

      - name: Compare SHA256 and set release flag
        id: compare_sha
        run: |
          # 访问当前 SHA256 (来自 date_and_sha 步骤的输出)
          CURRENT_SHA="${{ steps.date_and_sha.outputs.current_sha256 }}"
          PREVIOUS_SHA="${{ steps.check_previous_sha.outputs.previous_sha256 }}"
          NEEDS_RELEASE="false"

          if [ -z "$PREVIOUS_SHA" ]; then # 第一次运行或者 artifact 已过期
              NEEDS_RELEASE="true"
              echo "No previous SHA256 found (first run or artifact expired). A release is needed."
          elif [ "$CURRENT_SHA" != "$PREVIOUS_SHA" ]; then
              NEEDS_RELEASE="true"
              echo "SHA256 values differ. A new release is needed."
          else
              echo "SHA256 values are the same. No new release needed."
          fi

          echo "needs_release=$NEEDS_RELEASE" >> "$GITHUB_OUTPUT"

      - name: Prepare release assets
        if: ${{ success() && steps.compare_sha.outputs.needs_release == 'true' }} # 仅当构建成功且需要 Release 时才准备资产
        run: |
          mkdir -p release_assets
          # 使用步骤输出中存储的日期
          ASSET_NAME="coreos-installer-${{ steps.date_and_sha.outputs.date_tag }}-x86_64-unknown-linux-gnu"
          cp coreos-installer "release_assets/${ASSET_NAME}"
          sha256sum release_assets/* > release_assets/SHA256SUMS
          # 如果 coreos-installer_sha256.txt 也要作为 release 资产，取消注释下一行
          # cp ./.github/coreos-installer_sha256.txt release_assets/coreos-installer_sha256.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: ${{ success() && steps.compare_sha.outputs.needs_release == 'true' }} # 仅当构建成功且需要 Release 时才创建 Release
        with:
          # 使用步骤输出中存储的日期
          tag_name: nightly-${{ steps.date_and_sha.outputs.date_tag }}
          name: coreos-installer Nightly Build ${{ steps.date_and_sha.outputs.date_name }}
          body: |
            ### Daily Build of coreos-installer

            This is an automated nightly build of `coreos-installer` from the `main` branch.

            **Build Date:** ${{ steps.date_and_sha.outputs.date_name }}
            **Commit:** ${{ github.sha }}

            **Assets:**
            - `coreos-installer-${{ steps.date_and_sha.outputs.date_tag }}-x86_64-unknown-linux-gnu`
            - `SHA256SUMS`

            *Note: This is a nightly build and may contain unstable features or bugs. Use at your own risk.*
          files: release_assets/* # 移除了注释行，这会解决 'Pattern does not match any files' 警告
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload current SHA256 as artifact
        uses: actions/upload-artifact@v4
        with:
          name: previous-sha256
          path: ./.github/coreos-installer_sha256.txt # 确保上传这个文件
          retention-days: 7 # 保留 artifact 7 天
        if: always() # 无论构建是否成功，都尝试上传 SHA256，确保下次有数据